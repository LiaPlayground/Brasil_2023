id: Msw5YCj3DZzflNZTRLTr8PbUQO721rmpCxZlDqRN
createdBy: Mj92OSQdrbcE
dateCreated: 1689064662293
name: Demonstração de CrossLab
meta:
  logo: >-
    https://raw.githubusercontent.com/TUBAF-IfI-LiaScript/VL_EAVD/master/excercise/images/excercise_04.png
  description: >-
    Os alunos implementam uma aplicação que utiliza duas classes existentes para
    o uso de componentes periféricos - sensor ultrassônico e display LCD
    - Hum. O resultado é um aplicativo que mantém continuamente a distância
    perdeu um obstáculo. Os dados também são enviados via serial
    Saída da interface e analisada.
  selfAssign: true
members:
  teacher:
    - andredietrich@web.de
    - sebastian.zug@informatik.tu-freiberg.de
  student:
    - sebastian.ernst.zug@googlemail.com
    - passe.partout@web.de
modules:
  - url: https://edrys-org.github.io/module-liascript/
    config:
      course: >-
        https://raw.githubusercontent.com/TUBAF-IfI-LiaScript/VL_EAVD/master/excercise/04_OOP_stud.md
    showInCustom: Lobby
    width: full
    height: tall
  - url: https://cross-lab-project.github.io/edrys_module-station-stream/index.html
    stationConfig:
      video: true
      audio: false
    showInCustom: station
    width: full
    height: tall
  - url: https://cross-lab-project.github.io/edrys_module-editor/index.html
    config:
      editorText: >
        #include <Wire.h>

        #include <LiquidCrystal_PCF8574.h>

        #include <NewPing.h>


        #define trigPin  12

        #define echoPin  11


        #define MAX_DISTANCE 350 


        int lcdi2c = 0x27; // set the LCD address to 0x27

        LiquidCrystal_PCF8574 lcd(lcdi2c);


        NewPing sonar(trigPin, echoPin, MAX_DISTANCE);


        void setup()

        {
          lcd.begin(16, 2);
          lcd.setBacklight(255);
          lcd.clear();
          lcd.setCursor(0, 0);
          lcd.print("#CrossLab - 2023");
          lcd.setCursor(0, 1);
          lcd.print("CrossLab (edrys)");

          Serial.begin(9600);
          Serial.print("Let's go!");
        }


        void loop() {
          Serial.print("Distance: ");
          Serial.println(sonar.ping_cm());
          delay(200);
        }
      runCommand: execute
      language: cpp
      theme: light
    showInCustom: station
    width: full
    height: tall
  - url: https://cross-lab-project.github.io/edrys_module-pyxtermjs/index.html
    stationConfig:
      server: http://localhost:5000/pty
      execute: execute
      script: |
        echo $CODE | base64 --decode > Hello.ino
        arduino-cli sketch new Hello
        olddir=$(pwd)
        mv Hello.ino Hello
        cd Hello
        arduino-cli board attach -p /dev/ttyACM0 -b arduino:avr:uno
        arduino-cli compile
        arduino-cli upload -p /dev/ttyACM0
        cd $olddir
        arduino-cli monitor -p /dev/ttyACM0
      enable:
        teacher: true
        student: true
    showInCustom: station
    width: full
    height: tall
  - url: https://cross-lab-project.github.io/edrys_module-markdown-it/index.html
    studentConfig: |
      # Viel Erfolg
    teacherConfig: |
      # Aufgabenlösung

      ``` cpp

      #include <LiquidCrystal.h>
      #include <NewPing.h>

      const int triggerPin = 51;
      const int echoPin = 53;
      const int maxDistance = 400;
      const int ledPin =  13;

      NewPing sonar(triggerPin, echoPin, maxDistance);

      LiquidCrystal lcd(8, 9, 4, 5, 6, 7);

      void setup()  {
        lcd.begin(16, 2);
      }

      void loop()  {
        lcd.clear();
        lcd.setCursor(0, 0);
        lcd.print(sonar.ping_cm());
        lcd.setCursor(4, 0);
        lcd.print("cm");
        delay(200);
      }

      ```
    showInCustom: station
    width: full
    height: tall
